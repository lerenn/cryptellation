name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Run linter
    if: |
      !startsWith(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v7
        with:
          version: latest
          verb: call
          args: -m build/ci -s linter --source-dir=. stdout 

  check-generation:
    name: Check generation has been run
    if: |
      !startsWith(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v7
        with:
          version: latest
          verb: call
          args: -m build/ci -s check-generation --source-dir=. stdout

  unit-tests:
    name: Run unit tests
    needs: ["lint", "check-generation"]
    if: |
      !startsWith(github.event.head_commit.message, 'release:')
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v4
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v7
        with:
          version: latest
          verb: call
          args: -m build/ci -s unit-tests --source-dir=. stdout 

  # integration-tests:
  #   name: Run integration tests
  #   needs: ["unit-tests"]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create a go.work file
  #       run: cp go.work.example go.work
  #     - name: Create a credentials file
  #       run: |
  #         echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" > ./.credentials.env
  #         echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> ./.credentials.env
  #     - uses: dagger/dagger-for-github@v7
  #       with:
  #         version: latest
  #         verb: call
  #         args: -m build/ci -s integration-tests --source-dir=. --secrets-file=file:./.credentials.env stdout 

  # end-to-end-tests:
  #   name: Run end-to-end tests
  #   needs: ["integration-tests"]
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 5
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Create a go.work file
  #       run: cp go.work.example go.work
  #     - name: Create a credentials file
  #       run: |
  #         echo "BINANCE_API_KEY=${{ secrets.BINANCE_API_KEY }}" > ./.credentials.env
  #         echo "BINANCE_SECRET_KEY=${{ secrets.BINANCE_SECRET_KEY }}" >> ./.credentials.env
  #     - uses: dagger/dagger-for-github@v7
  #       with:
  #         version: latest
  #         verb: call
  #         args: -m build/ci -s end-to-end-tests --source-dir=. --secrets-file=file:./.credentials.env stdout 

  create-release:
    name: Create a release of the new version
    permissions:
      contents: write
    needs: ["unit-tests"]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.ref == 'refs/heads/main' && 
      !startsWith(github.event.head_commit.message, 'release:')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          username: lerenn
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v7
        with:
          version: latest
          verb: call
          args: >-
            -m build/ci -s
            create-release
            --source-dir=.
            --cryptellation-git-token=env:CRYPTELLATION_PULL_REQUEST_RW_TOKEN
            --cryptellation-pull-request-token=env:CRYPTELLATION_PULL_REQUEST_RW_TOKEN
        env:
          CRYPTELLATION_PULL_REQUEST_RW_TOKEN: ${{ secrets.CRYPTELLATION_PULL_REQUEST_RW_TOKEN }}

  publish-release:
    name: Publish the release of the new version
    permissions:
      contents: write
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: |
      github.ref == 'refs/heads/main' && 
      startsWith(github.event.head_commit.message, 'release:')
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
      - uses: docker/login-action@v3
        with:
          username: lerenn
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Create a go.work file
        run: cp go.work.example go.work
      - uses: dagger/dagger-for-github@v7
        with:
          version: latest
          verb: call
          args: >-
            -m build/ci -s
            publish-release
            --source-dir=.
            --cryptellation-git-token=env:CRYPTELLATION_PULL_REQUEST_RW_TOKEN
            --packages-git-token=env:PACKAGES_GITHUB_TOKEN
        env:
          CRYPTELLATION_PULL_REQUEST_RW_TOKEN: ${{ secrets.CRYPTELLATION_PULL_REQUEST_RW_TOKEN }}
          PACKAGES_GITHUB_TOKEN: ${{ secrets.PACKAGES_GITHUB_TOKEN }}
