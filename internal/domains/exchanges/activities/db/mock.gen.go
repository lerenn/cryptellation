// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CreateExchanges mocks base method.
func (m *MockInterface) CreateExchanges(ctx context.Context, params CreateExchangesParams) (CreateExchangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchanges", ctx, params)
	ret0, _ := ret[0].(CreateExchangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExchanges indicates an expected call of CreateExchanges.
func (mr *MockInterfaceMockRecorder) CreateExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchanges", reflect.TypeOf((*MockInterface)(nil).CreateExchanges), ctx, params)
}

// DeleteExchanges mocks base method.
func (m *MockInterface) DeleteExchanges(ctx context.Context, params DeleteExchangesParams) (DeleteExchangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchanges", ctx, params)
	ret0, _ := ret[0].(DeleteExchangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExchanges indicates an expected call of DeleteExchanges.
func (mr *MockInterfaceMockRecorder) DeleteExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchanges", reflect.TypeOf((*MockInterface)(nil).DeleteExchanges), ctx, params)
}

// ReadExchanges mocks base method.
func (m *MockInterface) ReadExchanges(ctx context.Context, params ReadExchangesParams) (ReadExchangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExchanges", ctx, params)
	ret0, _ := ret[0].(ReadExchangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExchanges indicates an expected call of ReadExchanges.
func (mr *MockInterfaceMockRecorder) ReadExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExchanges", reflect.TypeOf((*MockInterface)(nil).ReadExchanges), ctx, params)
}

// UpdateExchanges mocks base method.
func (m *MockInterface) UpdateExchanges(ctx context.Context, params UpdateExchangesParams) (UpdateExchangesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchanges", ctx, params)
	ret0, _ := ret[0].(UpdateExchangesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExchanges indicates an expected call of UpdateExchanges.
func (mr *MockInterfaceMockRecorder) UpdateExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchanges", reflect.TypeOf((*MockInterface)(nil).UpdateExchanges), ctx, params)
}
