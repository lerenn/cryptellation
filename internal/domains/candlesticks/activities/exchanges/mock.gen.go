// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package exchanges is a generated GoMock package.
package exchanges

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// GetCandlesticks mocks base method.
func (m *MockInterface) GetCandlesticks(ctx context.Context, payload GetCandlesticksParams) (GetCandlesticksResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCandlesticks", ctx, payload)
	ret0, _ := ret[0].(GetCandlesticksResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCandlesticks indicates an expected call of GetCandlesticks.
func (mr *MockInterfaceMockRecorder) GetCandlesticks(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCandlesticks", reflect.TypeOf((*MockInterface)(nil).GetCandlesticks), ctx, payload)
}

// Register mocks base method.
func (m *MockInterface) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockInterfaceMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockInterface)(nil).Register), w)
}
