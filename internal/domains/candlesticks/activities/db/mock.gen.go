// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// CreateCandlesticks mocks base method.
func (m *MockInterface) CreateCandlesticks(ctx context.Context, params CreateCandlesticksParams) (CreateCandlesticksResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandlesticks", ctx, params)
	ret0, _ := ret[0].(CreateCandlesticksResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandlesticks indicates an expected call of CreateCandlesticks.
func (mr *MockInterfaceMockRecorder) CreateCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandlesticks", reflect.TypeOf((*MockInterface)(nil).CreateCandlesticks), ctx, params)
}

// DeleteCandlesticks mocks base method.
func (m *MockInterface) DeleteCandlesticks(ctx context.Context, params DeleteCandlesticksParams) (DeleteCandlesticksResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandlesticks", ctx, params)
	ret0, _ := ret[0].(DeleteCandlesticksResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCandlesticks indicates an expected call of DeleteCandlesticks.
func (mr *MockInterfaceMockRecorder) DeleteCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandlesticks", reflect.TypeOf((*MockInterface)(nil).DeleteCandlesticks), ctx, params)
}

// ReadCandlesticks mocks base method.
func (m *MockInterface) ReadCandlesticks(ctx context.Context, params ReadCandlesticksParams) (ReadCandlesticksResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCandlesticks", ctx, params)
	ret0, _ := ret[0].(ReadCandlesticksResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCandlesticks indicates an expected call of ReadCandlesticks.
func (mr *MockInterfaceMockRecorder) ReadCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCandlesticks", reflect.TypeOf((*MockInterface)(nil).ReadCandlesticks), ctx, params)
}

// Register mocks base method.
func (m *MockInterface) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockInterfaceMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockInterface)(nil).Register), w)
}

// UpdateCandlesticks mocks base method.
func (m *MockInterface) UpdateCandlesticks(ctx context.Context, params UpdateCandlesticksParams) (UpdateCandlesticksResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandlesticks", ctx, params)
	ret0, _ := ret[0].(UpdateCandlesticksResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandlesticks indicates an expected call of UpdateCandlesticks.
func (mr *MockInterfaceMockRecorder) UpdateCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandlesticks", reflect.TypeOf((*MockInterface)(nil).UpdateCandlesticks), ctx, params)
}
