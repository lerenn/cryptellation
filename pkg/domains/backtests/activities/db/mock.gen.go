// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateBacktestActivity mocks base method.
func (m *MockDB) CreateBacktestActivity(ctx context.Context, params CreateBacktestActivityParams) (CreateBacktestActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBacktestActivity", ctx, params)
	ret0, _ := ret[0].(CreateBacktestActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBacktestActivity indicates an expected call of CreateBacktestActivity.
func (mr *MockDBMockRecorder) CreateBacktestActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBacktestActivity", reflect.TypeOf((*MockDB)(nil).CreateBacktestActivity), ctx, params)
}

// DeleteBacktestActivity mocks base method.
func (m *MockDB) DeleteBacktestActivity(ctx context.Context, params DeleteBacktestActivityParams) (DeleteBacktestActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBacktestActivity", ctx, params)
	ret0, _ := ret[0].(DeleteBacktestActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBacktestActivity indicates an expected call of DeleteBacktestActivity.
func (mr *MockDBMockRecorder) DeleteBacktestActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBacktestActivity", reflect.TypeOf((*MockDB)(nil).DeleteBacktestActivity), ctx, params)
}

// ListBacktestsActivity mocks base method.
func (m *MockDB) ListBacktestsActivity(ctx context.Context, params ListBacktestsActivityParams) (ListBacktestsActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBacktestsActivity", ctx, params)
	ret0, _ := ret[0].(ListBacktestsActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBacktestsActivity indicates an expected call of ListBacktestsActivity.
func (mr *MockDBMockRecorder) ListBacktestsActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBacktestsActivity", reflect.TypeOf((*MockDB)(nil).ListBacktestsActivity), ctx, params)
}

// ReadBacktestActivity mocks base method.
func (m *MockDB) ReadBacktestActivity(ctx context.Context, params ReadBacktestActivityParams) (ReadBacktestActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadBacktestActivity", ctx, params)
	ret0, _ := ret[0].(ReadBacktestActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadBacktestActivity indicates an expected call of ReadBacktestActivity.
func (mr *MockDBMockRecorder) ReadBacktestActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadBacktestActivity", reflect.TypeOf((*MockDB)(nil).ReadBacktestActivity), ctx, params)
}

// Register mocks base method.
func (m *MockDB) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockDBMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDB)(nil).Register), w)
}

// UpdateBacktestActivity mocks base method.
func (m *MockDB) UpdateBacktestActivity(ctx context.Context, params UpdateBacktestActivityParams) (UpdateBacktestActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBacktestActivity", ctx, params)
	ret0, _ := ret[0].(UpdateBacktestActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBacktestActivity indicates an expected call of UpdateBacktestActivity.
func (mr *MockDBMockRecorder) UpdateBacktestActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBacktestActivity", reflect.TypeOf((*MockDB)(nil).UpdateBacktestActivity), ctx, params)
}
