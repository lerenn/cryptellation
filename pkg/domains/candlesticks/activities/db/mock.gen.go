// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateCandlesticks mocks base method.
func (m *MockDB) CreateCandlesticks(ctx context.Context, params CreateCandlesticksActivityParams) (CreateCandlesticksActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCandlesticks", ctx, params)
	ret0, _ := ret[0].(CreateCandlesticksActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCandlesticks indicates an expected call of CreateCandlesticks.
func (mr *MockDBMockRecorder) CreateCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCandlesticks", reflect.TypeOf((*MockDB)(nil).CreateCandlesticks), ctx, params)
}

// DeleteCandlesticks mocks base method.
func (m *MockDB) DeleteCandlesticks(ctx context.Context, params DeleteCandlesticksActivityParams) (DeleteCandlesticksActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCandlesticks", ctx, params)
	ret0, _ := ret[0].(DeleteCandlesticksActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCandlesticks indicates an expected call of DeleteCandlesticks.
func (mr *MockDBMockRecorder) DeleteCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCandlesticks", reflect.TypeOf((*MockDB)(nil).DeleteCandlesticks), ctx, params)
}

// ReadCandlesticks mocks base method.
func (m *MockDB) ReadCandlesticks(ctx context.Context, params ReadCandlesticksActivityParams) (ReadCandlesticksActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCandlesticks", ctx, params)
	ret0, _ := ret[0].(ReadCandlesticksActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCandlesticks indicates an expected call of ReadCandlesticks.
func (mr *MockDBMockRecorder) ReadCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCandlesticks", reflect.TypeOf((*MockDB)(nil).ReadCandlesticks), ctx, params)
}

// Register mocks base method.
func (m *MockDB) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockDBMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDB)(nil).Register), w)
}

// UpdateCandlesticks mocks base method.
func (m *MockDB) UpdateCandlesticks(ctx context.Context, params UpdateCandlesticksActivityParams) (UpdateCandlesticksActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCandlesticks", ctx, params)
	ret0, _ := ret[0].(UpdateCandlesticksActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCandlesticks indicates an expected call of UpdateCandlesticks.
func (mr *MockDBMockRecorder) UpdateCandlesticks(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCandlesticks", reflect.TypeOf((*MockDB)(nil).UpdateCandlesticks), ctx, params)
}
