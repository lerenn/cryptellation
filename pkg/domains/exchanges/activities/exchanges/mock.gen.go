// Code generated by MockGen. DO NOT EDIT.
// Source: exchanges.go

// Package exchanges is a generated GoMock package.
package exchanges

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockExchanges is a mock of Exchanges interface.
type MockExchanges struct {
	ctrl     *gomock.Controller
	recorder *MockExchangesMockRecorder
}

// MockExchangesMockRecorder is the mock recorder for MockExchanges.
type MockExchangesMockRecorder struct {
	mock *MockExchanges
}

// NewMockExchanges creates a new mock instance.
func NewMockExchanges(ctrl *gomock.Controller) *MockExchanges {
	mock := &MockExchanges{ctrl: ctrl}
	mock.recorder = &MockExchangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanges) EXPECT() *MockExchangesMockRecorder {
	return m.recorder
}

// GetExchangeActivity mocks base method.
func (m *MockExchanges) GetExchangeActivity(ctx context.Context, params GetExchangeActivityParams) (GetExchangeActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeActivity", ctx, params)
	ret0, _ := ret[0].(GetExchangeActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExchangeActivity indicates an expected call of GetExchangeActivity.
func (mr *MockExchangesMockRecorder) GetExchangeActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeActivity", reflect.TypeOf((*MockExchanges)(nil).GetExchangeActivity), ctx, params)
}

// ListExchangesActivity mocks base method.
func (m *MockExchanges) ListExchangesActivity(ctx context.Context, params ListExchangesActivityParams) (ListExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListExchangesActivity", ctx, params)
	ret0, _ := ret[0].(ListExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListExchangesActivity indicates an expected call of ListExchangesActivity.
func (mr *MockExchangesMockRecorder) ListExchangesActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListExchangesActivity", reflect.TypeOf((*MockExchanges)(nil).ListExchangesActivity), ctx, params)
}

// Register mocks base method.
func (m *MockExchanges) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockExchangesMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockExchanges)(nil).Register), w)
}
