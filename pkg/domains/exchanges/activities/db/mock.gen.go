// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateExchanges mocks base method.
func (m *MockDB) CreateExchanges(ctx context.Context, params CreateExchangesActivityParams) (CreateExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchanges", ctx, params)
	ret0, _ := ret[0].(CreateExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExchanges indicates an expected call of CreateExchanges.
func (mr *MockDBMockRecorder) CreateExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchanges", reflect.TypeOf((*MockDB)(nil).CreateExchanges), ctx, params)
}

// DeleteExchanges mocks base method.
func (m *MockDB) DeleteExchanges(ctx context.Context, params DeleteExchangesActivityParams) (DeleteExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchanges", ctx, params)
	ret0, _ := ret[0].(DeleteExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExchanges indicates an expected call of DeleteExchanges.
func (mr *MockDBMockRecorder) DeleteExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchanges", reflect.TypeOf((*MockDB)(nil).DeleteExchanges), ctx, params)
}

// ReadExchanges mocks base method.
func (m *MockDB) ReadExchanges(ctx context.Context, params ReadExchangesActivityParams) (ReadExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExchanges", ctx, params)
	ret0, _ := ret[0].(ReadExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExchanges indicates an expected call of ReadExchanges.
func (mr *MockDBMockRecorder) ReadExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExchanges", reflect.TypeOf((*MockDB)(nil).ReadExchanges), ctx, params)
}

// UpdateExchanges mocks base method.
func (m *MockDB) UpdateExchanges(ctx context.Context, params UpdateExchangesActivityParams) (UpdateExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchanges", ctx, params)
	ret0, _ := ret[0].(UpdateExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExchanges indicates an expected call of UpdateExchanges.
func (mr *MockDBMockRecorder) UpdateExchanges(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchanges", reflect.TypeOf((*MockDB)(nil).UpdateExchanges), ctx, params)
}
