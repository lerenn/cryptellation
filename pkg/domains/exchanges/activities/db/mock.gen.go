// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	worker "go.temporal.io/sdk/worker"
	gomock "go.uber.org/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CreateExchangesActivity mocks base method.
func (m *MockDB) CreateExchangesActivity(ctx context.Context, params CreateExchangesActivityParams) (CreateExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExchangesActivity", ctx, params)
	ret0, _ := ret[0].(CreateExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateExchangesActivity indicates an expected call of CreateExchangesActivity.
func (mr *MockDBMockRecorder) CreateExchangesActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExchangesActivity", reflect.TypeOf((*MockDB)(nil).CreateExchangesActivity), ctx, params)
}

// DeleteExchangesActivity mocks base method.
func (m *MockDB) DeleteExchangesActivity(ctx context.Context, params DeleteExchangesActivityParams) (DeleteExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExchangesActivity", ctx, params)
	ret0, _ := ret[0].(DeleteExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteExchangesActivity indicates an expected call of DeleteExchangesActivity.
func (mr *MockDBMockRecorder) DeleteExchangesActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExchangesActivity", reflect.TypeOf((*MockDB)(nil).DeleteExchangesActivity), ctx, params)
}

// ReadExchangesActivity mocks base method.
func (m *MockDB) ReadExchangesActivity(ctx context.Context, params ReadExchangesActivityParams) (ReadExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadExchangesActivity", ctx, params)
	ret0, _ := ret[0].(ReadExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadExchangesActivity indicates an expected call of ReadExchangesActivity.
func (mr *MockDBMockRecorder) ReadExchangesActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadExchangesActivity", reflect.TypeOf((*MockDB)(nil).ReadExchangesActivity), ctx, params)
}

// Register mocks base method.
func (m *MockDB) Register(w worker.Worker) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", w)
}

// Register indicates an expected call of Register.
func (mr *MockDBMockRecorder) Register(w interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockDB)(nil).Register), w)
}

// UpdateExchangesActivity mocks base method.
func (m *MockDB) UpdateExchangesActivity(ctx context.Context, params UpdateExchangesActivityParams) (UpdateExchangesActivityResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExchangesActivity", ctx, params)
	ret0, _ := ret[0].(UpdateExchangesActivityResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateExchangesActivity indicates an expected call of UpdateExchangesActivity.
func (mr *MockDBMockRecorder) UpdateExchangesActivity(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExchangesActivity", reflect.TypeOf((*MockDB)(nil).UpdateExchangesActivity), ctx, params)
}
