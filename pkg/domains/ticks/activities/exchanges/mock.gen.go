// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package exchanges is a generated GoMock package.
package exchanges

import (
	context "context"
	reflect "reflect"

	tick "github.com/lerenn/cryptellation/v1/pkg/models/tick"
	gomock "go.uber.org/mock/gomock"
)

// MockExchanges is a mock of Exchanges interface.
type MockExchanges struct {
	ctrl     *gomock.Controller
	recorder *MockExchangesMockRecorder
}

// MockExchangesMockRecorder is the mock recorder for MockExchanges.
type MockExchangesMockRecorder struct {
	mock *MockExchanges
}

// NewMockExchanges creates a new mock instance.
func NewMockExchanges(ctrl *gomock.Controller) *MockExchanges {
	mock := &MockExchanges{ctrl: ctrl}
	mock.recorder = &MockExchangesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchanges) EXPECT() *MockExchangesMockRecorder {
	return m.recorder
}

// ListenSymbol mocks base method.
func (m *MockExchanges) ListenSymbol(ctx context.Context, exchange, symbol string) (chan tick.Tick, chan struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListenSymbol", ctx, exchange, symbol)
	ret0, _ := ret[0].(chan tick.Tick)
	ret1, _ := ret[1].(chan struct{})
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListenSymbol indicates an expected call of ListenSymbol.
func (mr *MockExchangesMockRecorder) ListenSymbol(ctx, exchange, symbol interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenSymbol", reflect.TypeOf((*MockExchanges)(nil).ListenSymbol), ctx, exchange, symbol)
}
